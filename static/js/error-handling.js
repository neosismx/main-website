var device_width = window.screen.width; let text_animation = gsap.utils.toArray(".has_text_move_anim"); text_animation && text_animation.forEach(t => { var a = .1; t.getAttribute("data-delay") && (a = t.getAttribute("data-delay")); let e = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 85%", duration: 1, scrub: !1, markers: !1, toggleActions: "play none none none" } }), r = new SplitText(t, { type: "lines" }); gsap.set(t, { perspective: 400 }), r.split({ type: "lines" }), e.from(r.lines, { duration: 1, delay: a, opacity: 0, rotationX: -80, force3D: !0, transformOrigin: "top center -50", stagger: .1 }) }); var animation_char_come_items = document.querySelectorAll(".has_char_anim"); animation_char_come_items.forEach(t => { var a = .05, e = 20, r = !1, o = 1, i = .1, s = 1, d = "power2.out"; if (t.getAttribute("data-stagger") && (a = t.getAttribute("data-stagger")), t.getAttribute("data-translateX") && (e = t.getAttribute("data-translateX")), t.getAttribute("data-translateY") && (r = t.getAttribute("data-translateY")), t.getAttribute("data-on-scroll") && (o = t.getAttribute("data-on-scroll")), t.getAttribute("data-delay") && (i = t.getAttribute("data-delay")), t.getAttribute("data-ease") && (d = t.getAttribute("data-ease")), t.getAttribute("data-duration") && (s = t.getAttribute("data-duration")), 1 == o) { if (e > 0 && !r) { let g = new SplitText(t, { type: "chars, words" }); gsap.from(g.chars, { duration: s, delay: i, x: e, autoAlpha: 0, stagger: a, ease: d, scrollTrigger: { trigger: t, start: "top 85%" } }) } if (r > 0 && !e) { let l = new SplitText(t, { type: "chars, words" }); gsap.from(l.chars, { duration: s, delay: i, y: r, autoAlpha: 0, ease: d, stagger: a, scrollTrigger: { trigger: t, start: "top 85%" } }) } if (e && r) { let n = new SplitText(t, { type: "chars, words" }); gsap.from(n.chars, { duration: 2, delay: i, y: r, x: e, autoAlpha: 0, ease: d, stagger: a, scrollTrigger: { trigger: t, start: "top 85%" } }) } if (!e && !r) { let u = new SplitText(t, { type: "chars, words" }); gsap.from(u.chars, { duration: 1, delay: i, x: 50, autoAlpha: 0, stagger: a, ease: d, scrollTrigger: { trigger: t, start: "top 85%" } }) } } else { if (e > 0 && !r) { let c = new SplitText(t, { type: "chars, words" }); gsap.from(c.chars, { duration: 1, delay: i, x: e, ease: d, autoAlpha: 0, stagger: a }) } if (r > 0 && !e) { let y = new SplitText(t, { type: "chars, words" }); gsap.from(y.chars, { duration: 1, delay: i, y: r, autoAlpha: 0, ease: d, stagger: a }) } if (e && r) { let A = new SplitText(t, { type: "chars, words" }); gsap.from(A.chars, { duration: 1, delay: i, y: r, x: e, ease: d, autoAlpha: 0, stagger: a }) } if (!e && !r) { let f = new SplitText(t, { type: "chars, words" }); gsap.from(f.chars, { duration: 1, delay: i, ease: d, x: 50, autoAlpha: 0, stagger: a }) } } }); let animation_word_anim_items = document.querySelectorAll(".has_word_anim"); animation_word_anim_items.forEach(t => { var a = .04, e = !1, r = !1, o = 1, i = .1, s = .75; if (t.getAttribute("data-stagger") && (a = t.getAttribute("data-stagger")), t.getAttribute("data-translateX") && (e = t.getAttribute("data-translateX")), t.getAttribute("data-translateY") && (r = t.getAttribute("data-translateY")), t.getAttribute("data-on-scroll") && (o = t.getAttribute("data-on-scroll")), t.getAttribute("data-delay") && (i = t.getAttribute("data-delay")), t.getAttribute("data-duration") && (s = t.getAttribute("data-duration")), 1 == o) { if (e && !r) { let d = new SplitText(t, { type: "chars, words" }); gsap.from(d.words, { duration: s, x: e, autoAlpha: 0, stagger: a, delay: i, scrollTrigger: { trigger: t, start: "top 90%" } }) } if (r && !e) { let g = new SplitText(t, { type: "chars, words" }); gsap.from(g.words, { duration: 1, delay: i, y: r, autoAlpha: 0, stagger: a, scrollTrigger: { trigger: t, start: "top 90%" } }) } if (r && e) { let l = new SplitText(t, { type: "chars, words" }); gsap.from(l.words, { duration: 1, delay: i, x: e, y: r, autoAlpha: 0, stagger: a, scrollTrigger: { trigger: t, start: "top 90%" } }) } if (!e && !r) { let n = new SplitText(t, { type: "chars, words" }); gsap.from(n.words, { duration: 1, delay: i, x: 20, autoAlpha: 0, stagger: a, scrollTrigger: { trigger: t, start: "top 85%" } }) } } else { if (e > 0 && !r) { let u = new SplitText(t, { type: "chars, words" }); gsap.from(u.words, { duration: 1, delay: i, x: e, autoAlpha: 0, stagger: a }) } if (r > 0 && !e) { let c = new SplitText(t, { type: "chars, words" }); gsap.from(c.words, { duration: 1, delay: i, y: r, autoAlpha: 0, stagger: a }) } if (r > 0 && e > 0) { let y = new SplitText(t, { type: "chars, words" }); gsap.from(y.words, { duration: 1, delay: i, x: e, y: r, autoAlpha: 0, stagger: a }) } if (!e && !r) { let A = new SplitText(t, { type: "chars, words" }); gsap.from(A.words, { duration: 1, delay: i, x: 20, autoAlpha: 0, stagger: a }) } } }); let fadeArray_items = document.querySelectorAll(".has_fade_anim"); if (fadeArray_items.length > 0) { let t = gsap.utils.toArray(".has_fade_anim"); t.forEach((t, a) => { var e = "bottom", r = 1, o = 1.15, i = 50, s = .15, d = "power2.out"; t.getAttribute("data-fade-offset") && (i = t.getAttribute("data-fade-offset")), t.getAttribute("data-duration") && (o = t.getAttribute("data-duration")), t.getAttribute("data-fade-from") && (e = t.getAttribute("data-fade-from")), t.getAttribute("data-on-scroll") && (r = t.getAttribute("data-on-scroll")), t.getAttribute("data-delay") && (s = t.getAttribute("data-delay")), t.getAttribute("data-ease") && (d = t.getAttribute("data-ease")); let g = { opacity: 0, ease: d, duration: o, delay: s }; "top" == e && (g.y = -i), "left" == e && (g.x = -i), "bottom" == e && (g.y = i), "right" == e && (g.x = i), 1 == r && (g.scrollTrigger = { trigger: t, start: "top 85%" }), gsap.from(t, g) }) } let mm = gsap.matchMedia(); mm.add("(min-width: 1024px)", () => { var t; document.querySelectorAll(".section-item").forEach(t => { console.log(t), gsap.to(t, { scrollTrigger: { trigger: t, markers: !1, pin: !0, pinSpacing: !1, start: "bottom bottom", end: "bottom -=500" } }) }) });